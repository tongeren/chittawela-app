export interface EventElement {
    element: HTMLElement | Window & typeof globalThis = window
}

export interface UseEventListenerArgs extends EventElement {
    eventName: StandardEvent,
    handler: (event: Event) => void,                                                        
}

export interface HTMLMeasureFunction {
    func: (ele: HTMLElement ) => Record<string, number>
}

export interface WindowMeasureFunction {
    func: (ele: Window & typeof globalThis) => Record<string, number>
}

export interface MeasureFunction {
    func: HTMLMeasureFunction | WindowMeasureFunction
}


export type StandardEvent = "abort" 
| "afterprint" 
| "animationcancel" 	
| "animationend" 	
| "animationiteration" 	
| "appinstalled" 
| "audioprocess" 	
| "audioend" 
| "audiostart" 	
| "beforeprint"	
| "beforeunload"	
| "beginEvent"	
| "blocked"
| "blur"	
| "boundary" 	
| "canplay"	
| "canplaythrough"	
| "change"
| "chargingchange"	
| "chargingtimechange"	
| "click"	
| "close"	
| "complete"		
| "compositionend"
| "compositionstart"	
| "compositionupdate"	
| "contextmenu"
| "copy"	
| "cut"	
| "dblclick"	
| "devicechange"
| "devicemotion"	
| "deviceorientation"	
| "dischargingtimechange"	
| "DOMActivate" 	
| "DOMAttributeNameChanged" 	
| "DOMAttrModified" 
| "DOMCharacterDataModified" 
| "DOMContentLoaded"	
| "DOMElementNameChanged" 	
| "DOMFocusIn" 	
| "DOMFocusOut" 	
| "DOMNodeInserted" 	
| "DOMNodeInsertedIntoDocument" 
| "DOMNodeRemoved" 	
| "DOMNodeRemovedFromDocument" 
| "DOMSubtreeModified" 	
| "drag"	
| "dragend"	
| "dragenter"	
| "dragleave"	
| "dragover"	
| "dragstart"
| "drop"
| "durationchange"	
| "emptied"	
| "end" 
| "ended"	
| "endEvent"	
| "error"
| "focus"	
| "focusin"	
| "focusout"	
| "fullscreenchange"
| "fullscreenerror"	
| "gamepadconnected"	
| "gamepaddisconnected"	
| "gotpointercapture"	
| "hashchange"	
| "lostpointercapture"	
| "input"
| "invalid"	
| "keydown"	
| "keypress" 	
| "keyup"	
| "languagechange"
| "levelchange"
| "load"	
| "loadeddata"	
| "loadedmetadata"	
| "loadend"	
| "loadstart"	
| "mark" 	
| "messageerror"
| "message"
| "mousedown"	
| "mouseenter"	
| "mouseleave"	
| "mousemove"	
| "mouseout"	
| "mouseover"	
| "mouseup"	
| "nomatch" 	
| "notificationclick"
| "offline"	
| "online"
| "open"
| "orientationchange"	
| "pagehide"	
| "pageshow"	
| "paste"
| "pause" 	
| "pointercancel"	
| "pointerdown"	
| "pointerenter"	
| "pointerleave"	
| "pointerlockchange"	
| "pointerlockerror"	
| "pointermove"	
| "pointerout"	
| "pointerover"	
| "pointerup"	
| "play"	
| "playing"	
| "popstate"	
| "progress"	
| "push"	
| "pushsubscriptionchange"	
| "ratechange"	
| "readystatechange"
| "repeatEvent"	
| "reset"	
| "resize"	
| "resourcetimingbufferfull"	
| "result"
| "resume" 	
| "scroll"	
| "seeked"	
| "seeking"	
| "select"	
| "selectstart" 	
| "selectionchange" 	
| "show"	
| "slotchange"	
| "soundend" 	
| "soundstart" 	
| "speechend" 	
| "speechstart"
| "stalled"	
| "start"	
| "storage"	
| "submit"	
| "success"	
| "suspend"	
| "SVGAbort"
| "SVGError"	
| "SVGLoad"	
| "SVGResize"	
| "SVGScroll"	
| "SVGUnload"	
| "SVGZoom"	
| "timeout"	
| "timeupdate"	
| "touchcancel"	
| "touchend"	
| "touchmove"	
| "touchstart"	
| "transitionend"	
| "unload"	
| "upgradeneeded"
| "userproximity" 	
| "voiceschanged"  	
| "versionchange"		
| "visibilitychange" 	
| "volumechange" 
| "waiting" 
| "wheel";

/*
interface EventListenerObject {
    handleEvent(evt: Event): void;
}








*/